#parse("TestMe macros.groovy")
#set($hasMocks=$MockitoMockBuilder.hasMocks($TESTED_CLASS))
#if($PACKAGE_NAME)
package ${PACKAGE_NAME}
#end
import spock.lang.*
#if($hasMocks)
import org.mockito.InjectMocks
import org.mockito.Mock
import org.mockito.MockitoAnnotations
//import static org.mockito.Mockito.*
#end

#parse("File Header.java")
class ${CLASS_NAME}  extends Specification {
#grRenderMockedFields($hasMocks,$TESTED_CLASS)
#grRenderTestSubjectInit($TESTED_CLASS,$TestSubjectUtils.hasTestableInstanceMethod($TESTED_CLASS.methods),$hasMocks)
#if($hasMocks)

    def setup() {
        MockitoAnnotations.${MockitoMockBuilder.initMocksMethod}(this)
    }
#end
#foreach($method in $TESTED_CLASS.methods)
#if($TestSubjectUtils.shouldBeTested($method))
#set($paraTestComponents=$TestBuilder.buildPrameterizedTestComponents($method,$grReplacementTypesForReturn,$grReplacementTypes,$grDefaultTypeValues))

    @Unroll
    def "#renderTestMethodNameAsWords($method.name)$TestSubjectUtils.formatSpockParamNamesTitle($paraTestComponents.paramsMap, $method.hasReturn())"() {
#if($hasMocks && $MockitoMockBuilder.shouldStub($method,$TESTED_CLASS))
        given:
#grRenderMockStubs($method,$TESTED_CLASS)

#end
        expect:
        #grRenderParameterizedMethodCall($method, $TESTED_CLASS.name, $paraTestComponents.methodClassParamsStr)#{if}($TestSubjectUtils.isJavaFuture($method.returnType)).get()#{end}#if($method.hasReturn()) == expectedResult
#end
#if(!$method.hasReturn())
        assert expectedResult == false //todo - validate something

#end
        where:
        $TestSubjectUtils.formatSpockDataParameters($paraTestComponents.paramsMap, "        ")
    }
#end
#end
}

#parse("TestMe Footer.java")