##* @vtlvariable name="replacementTypes" type="java.util.Map<java.lang.String,java.lang.String>" *#
##* @vtlvariable name="replacementTypesForReturn" type="java.util.Map<java.lang.String,java.lang.String>" *#
##* @vtlvariable name="defaultTypeValues" type="java.util.Map<java.lang.String,java.lang.String>" *#
##* @vtlvariable name="mockBuilder" type="com.weirddev.testme.intellij.template.context.MockBuilder" *#
#parse("TestMe common macros.java")
################## Global vars ###############
##$replacementTypes: Optionally defined a Map of initialiazation statements for custom types replacements where test params should be generated for defined interfaces. for instance:
#set($replacementTypes = {})
#set($mockBuilder = $MockitoMockBuilder)
##set($replacementTypes = {
##        "java.util.Collection": "java.util.Arrays.<TYPES>asList(<VAL>)",
##        "java.util.Map": "new java.util.HashMap<TYPES>(){{put(<VAL>,<VAL>);}}",
##})
##replacementTypesForReturn: Optionally defined a Map of initialiazation statements for custom types replacements where method return types should be generated for defined interfaces. for instance:
#set($replacementTypesForReturn = {})
##set(replacementTypesForReturn = {
##        "java.util.Collection": "java.util.Arrays.<TYPES>asList(<VAL>)",
##        "java.util.Map": "new java.util.HashMap<TYPES>(){{put(<VAL>,<VAL>);}}",
##})
#set($defaultTypeValues = {
    "byte": "(byte) 0",
    "short": "(short) 0",
    "int": "0",
    "long": "0L",
    "float": "0f",
    "double": "0d",
    "char": "'a'",
    "boolean": "true",
    "java.lang.Byte": "Byte.valueOf(""00110"")",
    "java.lang.Short": "Short.valueOf((short)0)",
    "java.lang.Integer": "Integer.valueOf(0)",
    "java.lang.Long": "Long.valueOf(1)",
    "java.lang.Float": "Float.valueOf(1.1f)",
    "java.lang.Double": "Double.valueOf(0)",
    "java.lang.Character": "Character.valueOf('a')",
    "java.lang.Boolean": "Boolean.TRUE",
    "java.math.BigDecimal": "new java.math.BigDecimal(0)",
    "java.util.Date": "new java.util.GregorianCalendar($YEAR, java.util.Calendar.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC, $HOUR_NUMERIC, $MINUTE_NUMERIC).getTime()",
    "java.time.LocalDate": "java.time.LocalDate.of($YEAR, java.time.Month.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC)",
    "java.time.LocalDateTime": "java.time.LocalDateTime.of($YEAR, java.time.Month.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC, $HOUR_NUMERIC, $MINUTE_NUMERIC, $SECOND_NUMERIC)",
    "java.time.LocalTime": "java.time.LocalTime.of($HOUR_NUMERIC, $MINUTE_NUMERIC, $SECOND_NUMERIC)",
    "java.time.Instant": "java.time.LocalDateTime.of($YEAR, java.time.Month.$MONTH_NAME_EN.toUpperCase(), $DAY_NUMERIC, $HOUR_NUMERIC, $MINUTE_NUMERIC, $SECOND_NUMERIC).toInstant(java.time.ZoneOffset.UTC)",
    "java.io.File": "new File(getClass().getResource(""/$PACKAGE_NAME.replace('.','/')/PleaseReplaceMeWithTestFile.txt"").getFile())",
    "java.lang.Class": "Class.forName(""$TESTED_CLASS.canonicalName"")"
})
##
##
################## Macros #####################
#macro(renderTestSubjectInit $testedClass $hasTestableInstanceMethod $hasMocks)
#if($hasMocks)
    @InjectMocks
    $testedClass.canonicalName $StringUtils.deCapitalizeFirstLetter($testedClass.name);
#elseif($hasTestableInstanceMethod)
    $testedClass.canonicalName $StringUtils.deCapitalizeFirstLetter($testedClass.name) = $TestBuilder.renderInitType($testedClass,"$class.name",$replacementTypes,$defaultTypeValues);
#end
#end
##
#macro(renderMockedFields $hasMocks $testedClass)
#foreach($field in $testedClass.fields)
#if($hasMocks && $mockBuilder.isMockable($field, $testedClass))
    @Mock
    $field.type.canonicalName $field.name;
#elseif($mockBuilder.isMockExpected($field))
    $mockBuilder.getImmockabiliyReason("//",$field)
#end
#end
#end
##
#macro(renderJavaReturnVar $type)
#if($type && $type.name !="void")$type.canonicalName#if($type.array)[]#end result = #end
#end
##
#macro(renderJUnitAssert $method)
#renderJunitAssertMethod($method.returnType)($TestBuilder.renderReturnParam($method,$method.returnType,"replaceMeWithExpectedResult",$replacementTypesForReturn,$defaultTypeValues), result#{if}($TestSubjectUtils.isJavaFuture($method.returnType)).get()#{end});
#end
##
#macro(renderTestNgAssert $method)
assertEquals(result#{if}($TestSubjectUtils.isJavaFuture($method.returnType)).get()#{end}, $TestBuilder.renderReturnParam($method,$method.returnType,"replaceMeWithExpectedResult",$replacementTypesForReturn,$defaultTypeValues));
#end
##
#macro(renderJunitAssertMethod $type)
#if($type && $type.array)assertArrayEquals#{else}assertEquals#end
#end##
##
#macro(renderMethodCall $method,$testedClassName)
#renderJavaReturnVar($method.returnType)#if($method.static)$testedClassName#{else}$StringUtils.deCapitalizeFirstLetter($testedClassName)#end.${method.name}($TestBuilder.renderMethodParams($method,$replacementTypes,$defaultTypeValues));##
#end
##
#macro(renderMockStubs $method $testedClass)
#foreach($field in $testedClass.fields)
#if($mockBuilder.isMockable($field, $testedClass))
#foreach($fieldMethod in $field.type.methods)
#if($fieldMethod.hasReturn() && $TestSubjectUtils.isMethodCalled($fieldMethod,$method))
        when($field.name.${fieldMethod.name}($mockBuilder.buildMockArgsMatchers(${fieldMethod.methodParams},"Java"))).thenReturn($TestBuilder.renderReturnParam($method,$fieldMethod.returnType,"${fieldMethod.name}Response",$replacementTypes,$defaultTypeValues));
#end
#end
#end
#end
#end
##
#macro(renderMockVerifies $method $testedClass)
#foreach($field in $testedClass.fields)
#if($mockBuilder.isMockable($field, $testedClass))
#foreach($fieldMethod in $field.type.methods)
#if(!$fieldMethod.hasReturn() && $TestSubjectUtils.isMethodCalled($fieldMethod,$method))
        verify($field.name).${fieldMethod.name}($mockBuilder.buildMockArgsMatchers(${fieldMethod.methodParams},"Java"));
#end
#end
#end
#end
#end
##----------------------------------------------------------------------------------------------------------------------
## PowerMock macros
##----------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------
## renderInternalMethodCallsStubs($methods,$testedClass)
## render internal method call stubs (currently PowerMock used)
## Param: $method - the tested method, $testedClass - the tested class
##----------------------------------------------------------------------------------------------------------------------
#macro(renderInternalMethodCallsStubs $method $testedClass)
    $testedClass.canonicalName $StringUtils.deCapitalizeFirstLetter($testedClass.name)Spy = spy($StringUtils.deCapitalizeFirstLetter($testedClass.name));
    #foreach($methodCall in $method.directMethodCalls)
        #if($TestSubjectUtils.isMethodOwnedByClass($methodCall.method, $testedClass) && $methodCall.method.hasReturn())
            #if($methodCall.method.hasParams())
                doReturn($TestBuilder.renderReturnParam($methodCall.method,$methodCall.method.returnType,"${methodCall.method.name}Response",$replacementTypes,$defaultTypeValues)).when(${StringUtils.deCapitalizeFirstLetter($testedClass.name)}Spy, "${methodCall.method.name}", $PowerMockBuilder.buildMockArgsMatchers(${methodCall.method.methodParams},"Java"));
            #else
                doReturn($TestBuilder.renderReturnParam($methodCall.method,$methodCall.method.returnType,"${methodCall.method.name}Response",$replacementTypes,$defaultTypeValues)).when(${StringUtils.deCapitalizeFirstLetter($testedClass.name)}Spy, "${methodCall.method.name}");
            #end
        #end
    #end
#end
##----------------------------------------------------------------------------------------------------------------------
## renderMethodCallWithSpy($method,$testedClassName)
## render method call use spy, currently PowerMock used
## Param: $method - the tested method, $testedClassName - the tested class name
##----------------------------------------------------------------------------------------------------------------------
#macro(renderMethodCallWithSpy $method,$testedClassName)
    #renderJavaReturnVar($method.returnType)#if($method.static)$testedClassName#{else}$StringUtils.deCapitalizeFirstLetter($testedClassName)Spy#end.${method.name}($TestBuilder.renderMethodParams($method,$replacementTypes,$defaultTypeValues));##
#end