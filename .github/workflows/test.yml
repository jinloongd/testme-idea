name: Test
on:
  workflow_call:
    inputs:
      IDEA_VERSION:
        required: true
        type: string
      WITH_IDEA_PLUGINS:
        required: true
        type: string
      SCALA_PLUGIN_VERSION:
        required: false
        type: string
jobs:
  test:
    name: test IDEA ${{inputs.IDEA_VERSION}} with plugins:${{inputs.WITH_IDEA_PLUGINS}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      checks: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Run tests
        id: run-test
#        uses: gradle/gradle-build-action@v2
#        with:
        run: |
          ./gradlew check jacocoTestReport jacocoIntTestReport -PideaVersion=${{ inputs.IDEA_VERSION }} -PscalaPluginVersion=${{ inputs.SCALA_PLUGIN_VERSION }} -PenableIdeaGroovyPlugin=${{ inputs.WITH_IDEA_PLUGINS }} -PenableIdeaScalaPlugin=${{ inputs.WITH_IDEA_PLUGINS }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        continue-on-error: true
        with:
          name: Test Results (${{inputs.IDEA_VERSION}},${{inputs.WITH_IDEA_PLUGINS}})
          path: build/test-results/**/*.xml
          reporter: java-junit

      - name: Test Results artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test results ${{inputs.IDEA_VERSION}} plugins=${{inputs.WITH_IDEA_PLUGINS}}
          path: build/reports/**

      - name: On failure - log report
        if: steps.run-test.outcome != 'success'
        run: ./print_surefire_reports.sh

      - name: trace file system state
        run: |
          ls -lhR ./build/jacoco
          ls -lhR ./build/reports
          
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        if: github.event.pull_request.head.repo.fork == false
        with:
#          files: ./coverage1.xml,./coverage2.xml # optional
#          flags: unittests # optional
#          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
